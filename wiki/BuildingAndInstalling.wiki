#summary Building and installing libkml

= Building and Installing libkml =

Please read the DEPENDENCIES file carefully and ensure you have the correct
versions of all required software.

There are two separate build systems: one for GNU/Linux and Mac OS X, and
another for Microsoft Windows.

== Linux and Mac OS X ==

We assume you have a reasonable GCC/autotools environment installation.
Performing a basic build should be as simple as:

{{{
cd libkml-0.x.x
mkdir build
cd build
../configure
make
sudo make install
}}}

In addition to the usual GNU build system configure options like --prefix, you
may fine-tune the building of libkml as follows. (Use ./configure --help to see
all extra options.)

=== SWIG bindings ===

If you want to create bindings for the additional supported languages, you need
to install the Simplified Wrapper and Interface Generator
([http://www.swig.org/ SWIG]) version 1.3.35. Once SWIG is installed, the
configure program will check for the existence of development versions of
Python and Java. If either is found, we attempt to build the SWIG bindings. If
you have either language installed in a non-default location, you can specify
the location(s) of your headers and libs like so:

{{{
../configure --with-java-include-dir=DIR \
             --with-java-lib-dir=DIR \
             --with-python-include-dir=DIR \
             --with-python-lib-dir=DIR
}}}

If possible, SWIG bindings are always built. You can disable this by:

{{{
../configure --disable-swig
}}}

Or you can disable specific languages:

{{{
../configure --disable-java --disable-python
}}}

By default we do not install the Python SWIG bindings in the system Python
extension directory. This is because writing to that directory likely requires
root privileges. You can override this behavior as follows. Installation must
then be performed by `sudo make install`.

{{{
../configure --enable-systempython
}}}

Otherwise, the Python bindings will be installed to a directory relative to
configure's prefix. This will likely be similar to
`/usr/local/lib/python2.5/site-packages/`. Your `PYTHONPATH` will of course
have to know about this directory.


== Microsoft Windows XP ==

We have used Microsoft Visual Studio 2005 to create the project files. The
top-level libkml.sln is the main solution file and will build both the kmldom
and kmlutil libraries. You can also build the examples from the solution file
in the examples directory.


= Running the unit tests =

IMPORTANT: since libkml does not use RTTI, you _must_ configure cppunit
accordingly. On Mac OS X the command is `./configure --disable-typeinfo-name`.
On Linux the command is: `./configure --disable-typeinfo-name LIBS="-ldl"`. See
the top-level DEPENDENCIES file.

We have provided a large suite of unit tests to verify the correct behavior of
libkml. We use the [http://cppunit.sourceforge.net CppUnit framework]. If you
have installed cppunit in its default location (a prefix of /usr/local) the
existence of such should be discovered automatically. If you have a custom
installation, you can specify where the headers and libraries are installed as:

{{{
../configure --with-cppunit-prefix=PFX --with-cppunit-exec-prefix=PFX
}}}

You can run the tests like so:

{{{
make check
}}}

The test output looks as follows:

{{{
make  check-TESTS
AbstractLatLonBoxTest::TestType : OK
AbstractLatLonBoxTest::TestDefaults : OK
AbstractLatLonBoxTest::TestSetToDefaultValues : OK
AbstractLatLonBoxTest::TestSetGetHasClear : OK
OK (4)
...
XsdTest::TestGoodElement : OK
XsdTest::TestBadElement : OK
XsdTest::TestUglyElement : OK
XsdTest::TestGoodEnum : OK
XsdTest::TestBadEnum : OK
XsdTest::TestUglyEnum : OK
OK (6)
PASS: xsd_test
===================
All 43 tests passed
===================
...
make  check-TESTS
KmzTest::TestDataIsKmz : OK
KmzTest::TestReadFileFromKmz : OK
KmzTest::TestReadKmlFromKmz : OK
OK (3)
PASS: kmz_test
==================
All 1 tests passed
==================
}}}

And so on. If any tests fail to pass, you will be asked to report the issue to
this project's issue tracker.
