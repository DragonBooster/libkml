#summary libkml convenience reference

= KML Convenience =

The KML Convenience classes and functions are in the kmlconvenience namespace.

These classes and functions are common and useful utilities not core to the
KML standard.

== Create commonly used elements ==

{{{
kmldom::PlacemarkPtr placemark = CreatePointPlacemark("My place", 38.38, -120.12);
}}}

This creates:

{{{
<Placemark>
  <name>My place</name>
  <Point>
    <coordinates>-120.12, 38.38</coordinates>
  </Point>
</Placemark>
}}}

== CSV file ==

The !CsvFile class parses a "CSV" file of this format:

score|lat|lon|name|description[|style_url]

A Point Placemark is created for each CSV entry.  !CsvFile stores its result
into a !FeatureList.

{{{
kmlconvenience::FeatureList feature_list;
kmlconvenience::CsvFile csv_file(&feature_list);
csv_file.ParseCsvFile("input.csv");
}}}

== Feature list ==

The !FeatureList class provides an efficient container to
operate on a set of Features including bounding box computation,
splitting by bounding box, sorting on score and saving
to a Container.

Put a bunch of Features in the !FeatureList and sort on score.
(KML itself has no concept of Feature "score".  This is particular
to kmlconvenience::!FeatureList.  The standard `<ExtendedData><Data>`
elements are used to hold the score.)

{{{
kmlconvenience::FeatureList feature_list;
for each feature:
  kmlconvenience::SetFeatureScore(the_features_score, feature);
  feature_list.PushBack(feature);
feature_list.Sort()
}}}

Split out the first N features within the given bounding box.

{{{
kmlconvenience::FeatureList features_in_some_bbox;
kmlengine::Bbox some_bbox;
feature_list.BboxSplit(bbox, how_many, &features_in_some_bbox);
}}}

Put the split out Features in a `<Folder>` and set the `<Region>` from
the bounding box.

{{{
kmldom::FolderPtr folder = factory->CreateFolder();
features_in_some_bbox.Save(folder);
kmldom::RegionPtr region = create-from-bbox(features_in_some_bbox);
folder->set_region(region);
}}}

== !GoogleMapsData and !HttpClient ==

The !GoogleMapsData class provides a C++ API to the Google Maps Data API.

See the
[http://code.google.com/apis/maps/documentation/mapsdata/developers_guide_protocol.html Google Maps Data API HTTP Protocol Guide] for the details of the HTTP protocol.
All methods on !GoogleMapsData are ultimately just HTTP POST and GET operations.

A !GoogleMapsData instance requires a !HttpClient to perform communications.

{{{
class YourHttpClient : public kmlconvenience::HttpClient {
 public:
  virtual bool SendRequest(...) const {
    ...your network I/O code goes here...
  }
};
}}}

The !HttpClient must be logged in to the "local" service:

{{{
YourHttpClient* your_http_client = new YourHttpClient;
your_http_client->Login("local", "user@gmail.com", "users-password");
}}}

See
[http://code.google.com/p/libkml/source/browse/trunk/examples/hellonet/curlfetch.h CurlHttpFetch]
for an !HttpClient using [http://curl.haxx.se/libcurl/ libcurl].  libcurl is not provided with libkml but it is
available for most any platform.

The !GoogleMapsData::Create static method creates a !GoogleMapsData object
using the created and logged-in !HttpClient:

{{{
GoogleMapsData* maps_data = GoogleMapsData::Create(your_http_client);
}}}

The !GetMetaFeed() method fetches and parses the Atom feed of the list of
the user's maps:

{{{
kmldom::AtomFeedPtr meta_feed = maps_data->GetMetaFeed();
}}}

The Atom &lt;entry&gt; and &lt;feed&gt; elements are supported by libkml:

{{{
for (size_t e = 0; e < meta_feed->get_entry_array_size(); ++e) {
  const kmldom::AtomEntryPtr& entry = meta_feed->get_entry_array_at(e);
  std::cout << "[title] " << entry->get_title() << std::endl;
}
}}}

The are additional methods on !GoogleMapsData to:
  * Create a new map
  * Add KML Features to a map
  * Get KML Features in a map

See [http://code.google.com/p/libkml/source/browse/trunk/src/kml/convenience/google_maps_data.h google_maps_data.h] for details.

Also see the
[http://code.google.com/p/libkml/source/browse/trunk/examples/hellonet/listgmaps.cc listgmaps.cc],
[http://code.google.com/p/libkml/source/browse/trunk/examples/hellonet/getgmapkml.cc getgmapkml.cc],
and
[http://code.google.com/p/libkml/source/browse/trunk/examples/hellonet/uploadgmap.cc uploadgmap.cc]
examples.